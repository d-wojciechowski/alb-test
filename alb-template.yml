AWSTemplateFormatVersion: 2010-09-09


Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Default: DefaultEC2KeyPair
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.nano
      - t2.micro
      - t2.small
    ConstraintDescription: must be a valid EC2 instance type.
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  AmiId:
    Description: AMI ID to be used for image creation of EC2 instance
    Type: String
    Default: ami-0fb2f0b847d44d4f0


Mappings:
  AWSInstanceType2Arch:
    t2.nano:
      Arch: HVM64
    t2.micro:
      Arch: HVM64
    t2.small:
      Arch: HVM64
  AWSInstanceType2NATArch:
    t2.nano:
      Arch: NATHVM64
    t2.micro:
      Arch: NATHVM64
    t2.small:
      Arch: NATHVM64

Resources:

## NETWORKING
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/24
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-VPC
        - Key: Owner
          Value: do-wojciechowski@wp.pl

  DefaultInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-IGW
        - Key: Owner
          Value: do-wojciechowski@wp.pl
          
  DefaultVPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref DefaultInternetGateway
      VpcId: !Ref VPC
      
  NATElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    DependsOn: DefaultVPCGatewayAttachment
    
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - '0'
          - Fn::GetAZs: ''
      CidrBlock: 10.0.0.32/28
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicSubnet1
        - Key: Owner
          Value: do-wojciechowski@wp.pl

  PublicSubnet1PublicRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - '1'
          - Fn::GetAZs: ''
      CidrBlock: 10.0.0.48/28
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicSubnet2
        - Key: Owner
          Value: do-wojciechowski@wp.pl

  PublicSubnet2PublicRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2
      
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - '0'
          - Fn::GetAZs: ''
      CidrBlock: 10.0.0.0/28
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateSubnet1
        - Key: Owner
          Value: do-wojciechowski@wp.pl

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - '1'
          - Fn::GetAZs: ''
      CidrBlock: 10.0.0.16/28
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateSubnet2
        - Key: Owner
          Value: do-wojciechowski@wp.pl
          
  NATGateway:
    Type: AWS::EC2::NatGateway
    DependsOn: NATElasticIP
    Properties:
      AllocationId:
        Fn::GetAtt:
          - NATElasticIP
          - AllocationId
      SubnetId:
        Ref: PublicSubnet1
  
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicRouteTable
        - Key: Owner
          Value: do-wojciechowski@wp.pl
  
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateRouteTable
        - Key: Owner
          Value: do-wojciechowski@wp.pl

  NATGatewayRoute:
    Type: AWS::EC2::Route
    Properties:
      NatGatewayId: !Ref NATGateway
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0

  PublicRouteTableOutboundRoute:
    Type: AWS::EC2::Route
    DependsOn: DefaultVPCGatewayAttachment
    Properties:
      GatewayId: !Ref DefaultInternetGateway
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0

  PrivateSubnet1DefaultRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2DefaultRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2

## COMPUTE

  Instance1:
    Type: 'AWS::EC2::Instance'
    Properties:
      AvailabilityZone:
        Fn::Select:
          - '0'
          - Fn::GetAZs: ''
      ImageId: !Ref AmiId
      InstanceType: !Ref InstanceType
      SecurityGroupIds:
        - !GetAtt "InstanceSecurityGroup.GroupId"
      KeyName: !Ref KeyName
      SubnetId: !Ref PrivateSubnet1
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Instance-1
        - Key: Owner
          Value: do-wojciechowski@wp.pl
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          yum update -y
          yum install -y httpd
          systemctl start httpd
          systemctl enable httpd
          echo "<html><body><h1>Hello World, I am instance 1</h1></body></html>" > /var/www/html/index.html

  Instance2:
    Type: 'AWS::EC2::Instance'
    Properties:
      AvailabilityZone:
        Fn::Select:
          - '1'
          - Fn::GetAZs: ''
      ImageId: !Ref AmiId
      InstanceType: !Ref InstanceType
      SecurityGroupIds:
        - !GetAtt "InstanceSecurityGroup.GroupId"
      KeyName: !Ref KeyName
      SubnetId: !Ref PrivateSubnet2
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Instance-2
        - Key: Owner
          Value: do-wojciechowski@wp.pl
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          yum update -y
          yum install -y httpd
          systemctl start httpd
          systemctl enable httpd
          echo "<html><body><h1>Hello World, I am instance 2</h1></body></html>" > /var/www/html/index.html

  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: !Sub ${AWS::StackName}-InstanceSecurityGroup
      VpcId: !Ref VPC
      GroupDescription: Enable HTTP:80 Access to ELB Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !GetAtt "ELBSecurityGroup.GroupId"
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !GetAtt "BastionSecurityGroup.GroupId"
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-InstanceSecurityGroup
        - Key: Owner
          Value: do-wojciechowski@wp.pl

  # ELB
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Name: !Sub ${AWS::StackName}-ALB
      Scheme: internet-facing
      SecurityGroups:
        - !GetAtt "ELBSecurityGroup.GroupId"
      Subnets:
        - Ref: PublicSubnet1
        - Ref: PublicSubnet2
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-ALB
        - Key: Owner
          Value: do-wojciechowski@wp.pl
      Type: application

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /index.html
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: 200
      Name: !Sub ${AWS::StackName}-TargetGroup
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      TargetType: instance
      Targets:
        - Id: !Ref Instance1
          Port: 80
        - Id: !Ref Instance2
          Port: 80
      VpcId: !Ref VPC

  ELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${AWS::StackName}-ELBSecurityGroup
      VpcId: !Ref VPC
      GroupDescription: ELB Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-ELBSecurityGroup
        - Key: Owner
          Value: do-wojciechowski@wp.pl

  # BASTION

  BastionInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      AvailabilityZone:
        Fn::Select:
          - '0'
          - Fn::GetAZs: ''
      ImageId: !Ref AmiId
      InstanceType: !Ref InstanceType
      SecurityGroupIds:
        - !GetAtt "BastionSecurityGroup.GroupId"
      KeyName: !Ref KeyName
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-BastionInstance
        - Key: Owner
          Value: do-wojciechowski@wp.pl

  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${AWS::StackName}-BastionSecurityGroup
      VpcId: !Ref VPC
      GroupDescription: Bastion Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-BastionSecurityGroup
        - Key: Owner
          Value: do-wojciechowski@wp.pl

#Outputs:
#  InstanceId:
#    Description: InstanceId of the newly created EC2 instance
#    Value: !Ref EC2Instance

